{"ast":null,"code":"var _jsxFileName = \"D:\\\\flipClock\\\\react\\\\src\\\\components\\\\FlipClock.js\";\n\n/*\r\n * 翻牌时钟\r\n * @author： 兔子先生\r\n * @createDate: 2019-11-24\r\n */\nimport React, { Component } from 'react';\nimport Flipper from './Flipper';\nimport './flipClock.css';\n\nclass FlipClock extends Component {\n  constructor(props) {\n    super(props);\n    this.timer = null;\n    this.flipObjs = [];\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"FlipClock\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Flipper, {\n      ref: \"flipperHour1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Flipper, {\n      ref: \"flipperHour2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }\n    }, \":\"), /*#__PURE__*/React.createElement(Flipper, {\n      ref: \"flipperMinute1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Flipper, {\n      ref: \"flipperMinute2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    }, \":\"), /*#__PURE__*/React.createElement(Flipper, {\n      ref: \"flipperSecond1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Flipper, {\n      ref: \"flipperSecond2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  componentDidMount() {\n    this.flipObjs = [this.refs.flipperHour1, this.refs.flipperHour2, this.refs.flipperMinute1, this.refs.flipperMinute2, this.refs.flipperSecond1, this.refs.flipperSecond2];\n    this.init();\n    this.run();\n  } // 初始化数字\n\n\n  init() {\n    let now = new Date();\n    let nowTimeStr = this.formatDate(new Date(now.getTime()), 'hhiiss');\n\n    for (let i = 0; i < this.flipObjs.length; i++) {\n      this.flipObjs[i].setFront(nowTimeStr[i]);\n    }\n  } // 开始计时\n\n\n  run() {\n    this.timer = setInterval(() => {\n      // 获取当前时间\n      let now = new Date();\n      let nowTimeStr = this.formatDate(new Date(now.getTime() - 1000), 'hhiiss');\n      let nextTimeStr = this.formatDate(now, 'hhiiss');\n\n      for (let i = 0; i < this.flipObjs.length; i++) {\n        if (nowTimeStr[i] === nextTimeStr[i]) {\n          continue;\n        }\n\n        this.flipObjs[i].flipDown(nowTimeStr[i], nextTimeStr[i]);\n      }\n    }, 1000);\n  } // 正则格式化日期\n\n\n  formatDate(date, dateFormat) {\n    /* 单独格式化年份，根据y的字符数量输出年份\r\n    * 例如：yyyy => 2019\r\n          yy => 19\r\n          y => 9\r\n    */\n    if (/(y+)/.test(dateFormat)) {\n      dateFormat = dateFormat.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));\n    } // 格式化月、日、时、分、秒\n\n\n    let o = {\n      'm+': date.getMonth() + 1,\n      'd+': date.getDate(),\n      'h+': date.getHours(),\n      'i+': date.getMinutes(),\n      's+': date.getSeconds()\n    };\n\n    for (let k in o) {\n      if (new RegExp(`(${k})`).test(dateFormat)) {\n        // 取出对应的值\n        let str = o[k] + '';\n        /* 根据设置的格式，输出对应的字符\r\n         * 例如: 早上8时，hh => 08，h => 8\r\n         * 但是，当数字>=10时，无论格式为一位还是多位，不做截取，这是与年份格式化不一致的地方\r\n         * 例如: 下午15时，hh => 15, h => 15\r\n         */\n\n        dateFormat = dateFormat.replace(RegExp.$1, RegExp.$1.length === 1 ? str : this.padLeftZero(str));\n      }\n    }\n\n    return dateFormat;\n  } // 日期时间补零\n\n\n  padLeftZero(str) {\n    return ('00' + str).substr(str.length);\n  }\n\n}\n\nexport default FlipClock;","map":{"version":3,"sources":["D:/flipClock/react/src/components/FlipClock.js"],"names":["React","Component","Flipper","FlipClock","constructor","props","timer","flipObjs","render","componentDidMount","refs","flipperHour1","flipperHour2","flipperMinute1","flipperMinute2","flipperSecond1","flipperSecond2","init","run","now","Date","nowTimeStr","formatDate","getTime","i","length","setFront","setInterval","nextTimeStr","flipDown","date","dateFormat","test","replace","RegExp","$1","getFullYear","substr","o","getMonth","getDate","getHours","getMinutes","getSeconds","k","str","padLeftZero"],"mappings":"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","sourcesContent":["/*\r\n * 翻牌时钟\r\n * @author： 兔子先生\r\n * @createDate: 2019-11-24\r\n */\r\nimport React, { Component } from 'react'\r\nimport Flipper from './Flipper'\r\nimport './flipClock.css'\r\n\r\nclass FlipClock extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.timer = null\r\n        this.flipObjs = []\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"FlipClock\">\r\n                <Flipper ref=\"flipperHour1\" />\r\n                <Flipper ref=\"flipperHour2\" />\r\n                <em>:</em>\r\n                <Flipper ref=\"flipperMinute1\" />\r\n                <Flipper ref=\"flipperMinute2\" />\r\n                <em>:</em>\r\n                <Flipper ref=\"flipperSecond1\" />\r\n                <Flipper ref=\"flipperSecond2\" />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.flipObjs = [\r\n            this.refs.flipperHour1,\r\n            this.refs.flipperHour2,\r\n            this.refs.flipperMinute1,\r\n            this.refs.flipperMinute2,\r\n            this.refs.flipperSecond1,\r\n            this.refs.flipperSecond2\r\n        ]\r\n        this.init()\r\n        this.run()\r\n    }\r\n\r\n    // 初始化数字\r\n    init() {\r\n        let now = new Date()\r\n        let nowTimeStr = this.formatDate(new Date(now.getTime()), 'hhiiss')\r\n        for (let i = 0; i < this.flipObjs.length; i++) {\r\n            this.flipObjs[i].setFront(nowTimeStr[i])\r\n        }\r\n    }\r\n    // 开始计时\r\n    run() {\r\n        this.timer = setInterval(() => {\r\n            // 获取当前时间\r\n            let now = new Date()\r\n            let nowTimeStr = this.formatDate(new Date(now.getTime() - 1000), 'hhiiss')\r\n            let nextTimeStr = this.formatDate(now, 'hhiiss')\r\n            for (let i = 0; i < this.flipObjs.length; i++) {\r\n                if (nowTimeStr[i] === nextTimeStr[i]) {\r\n                    continue\r\n                }\r\n                this.flipObjs[i].flipDown(\r\n                    nowTimeStr[i],\r\n                    nextTimeStr[i]\r\n                )\r\n            }\r\n        }, 1000)\r\n    }\r\n    // 正则格式化日期\r\n    formatDate(date, dateFormat) {\r\n        /* 单独格式化年份，根据y的字符数量输出年份\r\n       * 例如：yyyy => 2019\r\n              yy => 19\r\n              y => 9\r\n       */\r\n        if (/(y+)/.test(dateFormat)) {\r\n            dateFormat = dateFormat.replace(\r\n                RegExp.$1,\r\n                (date.getFullYear() + '').substr(4 - RegExp.$1.length)\r\n            )\r\n        }\r\n        // 格式化月、日、时、分、秒\r\n        let o = {\r\n            'm+': date.getMonth() + 1,\r\n            'd+': date.getDate(),\r\n            'h+': date.getHours(),\r\n            'i+': date.getMinutes(),\r\n            's+': date.getSeconds()\r\n        }\r\n        for (let k in o) {\r\n            if (new RegExp(`(${k})`).test(dateFormat)) {\r\n                // 取出对应的值\r\n                let str = o[k] + ''\r\n                /* 根据设置的格式，输出对应的字符\r\n                 * 例如: 早上8时，hh => 08，h => 8\r\n                 * 但是，当数字>=10时，无论格式为一位还是多位，不做截取，这是与年份格式化不一致的地方\r\n                 * 例如: 下午15时，hh => 15, h => 15\r\n                 */\r\n                dateFormat = dateFormat.replace(\r\n                    RegExp.$1,\r\n                    RegExp.$1.length === 1 ? str : this.padLeftZero(str)\r\n                )\r\n            }\r\n        }\r\n        return dateFormat\r\n    }\r\n    // 日期时间补零\r\n    padLeftZero(str) {\r\n        return ('00' + str).substr(str.length)\r\n    }\r\n}\r\nexport default FlipClock"]},"metadata":{},"sourceType":"module"}